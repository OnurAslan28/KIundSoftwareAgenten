model lasertag

use Mars

grid-layer Battleground as battleground

// ************************************************************************************************
// **************************************** PASSIVE AGENTS ****************************************
// ************************************************************************************************

agent Spawner on Battleground {
		
	initialize {
		for (var x = 0; x < battleground.DimensionX; x++) {
			for (var y = 0; y < battleground.DimensionY; y++) {
				pos me at #(x, y)
				var value = battleground.GetIntegerValue(x, y)
				switch (value) {
					case 1 : { spawn Barrier }
					case 2 : { spawn Hill }
					case 3 : { spawn Ditch }
					default: { }
				}
			}
		}
	}
	
	tick {
		if (simtime % 20 === 0) { println("Current tick: " + simtime) }
	}
	
}

agent Barrier on Battleground {
	
	// returns x-coordinate
	passive GetX() : real => return xcor

	// returns y-coordinate
	passive GetY() : real => return ycor
	
}

agent Hill on Battleground { 

	observe var free : bool = true
	
	tick {
		if (not free) {
			var greenTeam = explore Green
			var redTeam = explore Red
			var blueTeam = explore Blue
			var yellowTeam = explore Yellow
			var freeMe : bool = true
			for (var i = 0; i < length(greenTeam); i++) {
				var green = greenTeam[i]
				if ((green.GetX === xcor) and (green.GetY === ycor)) { freeMe = false }
			}
			for (var i = 0; i < length(redTeam); i++) {
				var red = redTeam[i]
				if ((red.GetX === xcor) and (red.GetY === ycor)) { freeMe = false }
			}
			for (var i = 0; i < length(blueTeam); i++) {
				var blue = blueTeam[i]
				if ((blue.GetX === xcor) and (blue.GetY === ycor)) { freeMe = false }
			}
			for (var i = 0; i < length(yellowTeam); i++) {
				var yellow = yellowTeam[i]
				if ((yellow.GetX === xcor) and (yellow.GetY === ycor)) { freeMe = false }
			}
			if (freeMe) { free = true }
		}
	}
	
	// returns x-coordinate
	passive GetX() => return xcor

	// returns y-coordinate
	passive GetY() => return ycor
	
	// returns whether hill is free
	passive IsFree() => return free
	
	// sets hill status to free
	passive Free() => free = true
	
	// sets hill status to occupied
	passive Occupy() => free = false
	
}

agent Ditch on Battleground { 
	
	observe var free : bool = true
	
	tick {
		if (not free) {
			var greenTeam = explore Green
			var redTeam = explore Red
			var blueTeam = explore Blue
			var yellowTeam = explore Yellow
			var freeMe : bool = true
			for (var i = 0; i < length(greenTeam); i++) {
				var green = greenTeam[i]
				if ((green.GetX === xcor) and (green.GetY === ycor)) { freeMe = false }
			}
			for (var i = 0; i < length(redTeam); i++) {
				var red = redTeam[i]
				if ((red.GetX === xcor) and (red.GetY === ycor)) { freeMe = false }
			}
			for (var i = 0; i < length(blueTeam); i++) {
				var blue = blueTeam[i]
				if ((blue.GetX === xcor) and (blue.GetY === ycor)) { freeMe = false }
			}
			for (var i = 0; i < length(yellowTeam); i++) {
				var yellow = yellowTeam[i]
				if ((yellow.GetX === xcor) and (yellow.GetY === ycor)) { freeMe = false }
			}
			if (freeMe) { free = true }
		}
	}
	
	// returns x-coordinate
	passive GetX() => return xcor

	// returns y-coordinate
	passive GetY() => return ycor
	
	// returns whether ditch is free
	passive IsFree() => return free
	
	// sets ditch status to free
	passive Free() => free = true
	
	// sets ditch status to occupied
	passive Occupy() => free = false
	
}
